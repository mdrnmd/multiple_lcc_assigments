package sonc.game;

import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.List;

import sonc.battle.*;
import sonc.shared.*;

public class Manager implements Serializable {

	private static final long serialVersionUID = 1L;
	Players allPlayers;
	static Manager instance;
	static File store;

	private Manager() {
		allPlayers = new Players();
		instance = null;
	}

	public static File getPlayersFile() {
		return store;
	}

	public static void setPlayersFile(java.io.File managerFile) {
		store = managerFile;
	}

	public static Manager getInstance() throws SoncException {
		if(instance != null) {
			return instance;
		}
		else {
			try{
				instance = restore();
				return instance;
			}
			catch(Exception e) {
				instance = new Manager();
				throw new SoncException();
			}
		}
	}

	private static Manager restore() {
		// TODO Auto-generated method stub
		Manager tmp;
		try {
			FileInputStream fileStream = new FileInputStream(store);
			ObjectInputStream objStream = new ObjectInputStream(fileStream);
			tmp = (Manager) objStream.readObject();  
			objStream.close();
		}
		catch(Exception e) {
			tmp = null;
		}
		return tmp;  
	}

	public boolean register(String userId, String password)
			throws SoncException {
		return false;	
	}

	public boolean updatePassword(String nick, String oldPassword, String newPassword)
			throws SoncException {
		return false;
	}

	public boolean authenticate(String nick, String password) {
		return false;
	}

	public String getCurrentCode(String nick,String password)
			throws SoncException {
		return password;	
	}

	public void buildShip(String nick,String password,String code)
			throws SoncException {

	}

	List<String> getPlayersNamesWithShips() {
		return allPlayers.getPlayersNamesWithShips();
	}

	public Movie battle(List<String> nicks) {
		World currentWorld = new World();
        List<Ship> ships = new LinkedList<Ship>();
        for(String name : getPlayersNamesWithShips()) {
            ships.add(allPlayers.getPlayer(name).instanceShip());
        }  
        return currentWorld.battle(ships);
	}

	void reset() {
		instance = new Manager();
	}
}
