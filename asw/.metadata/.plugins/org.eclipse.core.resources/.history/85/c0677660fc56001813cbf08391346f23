import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


class DecisionTree {

	Node[] nodeArray;
	int depth;
	// Data about the matrix
	int numAttributes=-1;
	List<List<String>> data;
	int nodeCount=0;

	public DecisionTree(List<List<String>> data) {
		this.data = data;

		List<String> line = data.get(0);
		for (int i = 0; i < line.size(); i++) {
			numAttributes++;
		}
	}
	
	/*
	 * Generate Tree
	 */
	public boolean generateTree() {
		Node root = new Node();
		
		root.parentIndex = -1;
		root.depth = 0; 
		root.index = nodeCount; // Index of node in node array of tree 
		//Do work 
		
		root.entropy = calculateEntropy();
		//root.threshold;
		//root.atribute;
		
		nodeArray[nodeCount] = root;
		nodeCount++;
		
	}
	double calculateEntropy() {
		return 0.0;
	}
	
	/*
	 * Question the tree
	 */
	public String question(String line) {
		String answer = new String(); 
		return answer;
	}

	public void print() {

	}
}

class Node {
	
	Node leftNode;
	Node rightNode;
	Node parentNode;
	int depth; 
	int index; // Index of node in node array of tree 
	int atribute;
	String threshold;
	double entropy;
	List<List<String>> leftIndices, rightIndices;
	
	public Node() {
	}
}

public class ID3  {

	static public List<List<String>> readFile(String path) {
		// this gives you a 2-dimensional array of strings
		List<List<String>> lines = new ArrayList<>();

		File file= new File(path);
		Scanner inputStream;

		try {
			inputStream = new Scanner(file);
			while(inputStream.hasNext()) {
				String line= inputStream.next();
				String[] values = line.split(",");
				// this adds the currently parsed line to the 2-dimensional string array
				lines.add(Arrays.asList(values));
			}
			inputStream.close();
			return lines;
		}
		catch (FileNotFoundException e) {
			return null;
		}
	}

	static public void printMatrix(	List<List<String>> lines) {
		for(List<String> line: lines) {
			for (String value: line) {
				System.out.print( " " + value);
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		List<List<String>> matrix = new ArrayList<>();
		matrix = readFile("./weather.csv");
		if(matrix == null) {
			System.out.println("Unable to read file");
			System.exit(0);
		}
		else {
			printMatrix(matrix);
			DecisionTree tree = new DecisionTree(matrix);
			if(tree.generateTree() == false) {
				System.out.println("\nFailed to generate tree");
				System.exit(0);
			}
			else {
				
				tree.print();

			}
		}
	}
}